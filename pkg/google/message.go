package google

var stderr = struct {
	AudDecode,
	BuildLoginRequest,
	CertificateCache,
	DecodeBase64URL,
	DecodeJSON,
	DeviceNotFound,
	DiscoveryDocCache,
	EncodeJSON,
	IDTokenNoEmail,
	IDTokenNoSub,
	InvalidState,
	LoadDiscoveryDoc,
	LoginRequest,
	MissEnvVar,
	NoCerts,
	NoLoginInfo,
	NoToken,
	OAuth2Nil,
	ParsingIDToken,
	ParseUnixTime,
	QueryUnescape,
	ReadResponse,
	Response,
	SignatureVerify,
	SignOut,
	StateMismatch,
	TokenNotSet,
	ValidateTokenAud,
	ValidateTokenExp,
	ValidateTokenKeys,
	ValidateTokenHd,
	ValidateTokenIss,
	ValidateTokenNil,
	ValidateTokenPrj,
	WriteResponseBody string
}{
	AudDecode:         "url escape fail on aud field: %v",
	BuildLoginRequest: "failed to build a login request: %v",
	CertificateCache:  "unable to load certificate data from cache",
	DecodeBase64URL:   "failed to decode base64URL: %v",
	DecodeJSON:        "could not decode JSON: %v",
	DeviceNotFound:    "device %v was not found",
	DiscoveryDocCache: "unable to load discovery document from cache",
	EncodeJSON:        "unable encode JSON: %v",
	IDTokenNoEmail:    "no email claim found in payload",
	IDTokenNoSub:      "no sub claim found in payload",
	InvalidState:      "invalid unique session token state values",
	LoadDiscoveryDoc:  "failed to load Google discovery document: %v",
	LoginRequest:      "could not login: %v",
	MissEnvVar:        "missing env var: %v",
	NoCerts:           "no certificates to validate token",
	NoLoginInfo:       "login info %v was not found",
	NoToken:           "no token has been set on this provider, are you sure the client has gone through the login process",
	OAuth2Nil:         "no oauth2 credentials are set",
	ParsingIDToken:    "error parsing ID token: %v",
	ParseUnixTime:     "failed to parse unix time %q: %v",
	QueryUnescape:     "failed to unescape query string: %v",
	ReadResponse:      "could not read response: %v",
	Response:          "failed to get the expected response: %v",
	SignatureVerify:   "signature verification failed, mk",
	SignOut:           "signing out failed: %v",
	StateMismatch:     "unique session token state mismatch",
	TokenNotSet:       "token not found in the session",
	ValidateTokenAud:  "aud field not found in token returned from Google",
	ValidateTokenExp:  "token has expired",
	ValidateTokenHd:   "invalid aud\nret-hd: %v\norg-hd: %v",
	ValidateTokenIss:  "invalid iss: %v",
	ValidateTokenKeys: "could not parse certificate keys: %v",
	ValidateTokenNil:  "token is nil",
	ValidateTokenPrj:  "invalid aud\nret-aud: %v\norg-aud: %v",
	WriteResponseBody: "could not write response body: %v",
}

var stdout = struct {
	GoogleTokenExp,
	GoogleTokenUri,
	Url,
	VerifyAuth string
}{
	GoogleTokenExp: "google has provided a token that expires in %v seconds",
	GoogleTokenUri: "Google OIDC Token URI: %v",
	Url:            "requesting URL: %v",
	VerifyAuth:     "verify user is authenticated",
}
